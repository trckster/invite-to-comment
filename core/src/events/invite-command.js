import {Command} from "./command.js";
import {db} from "../services/db.js";
import {isValidTelegramUserId} from "../services/event-recognizer.js";
import {telegramApi} from "../services/telegram-api.js";

const MINUTES_UNTIL_OVERWRITE = 30

class InviteCommand extends Command {
    async process() {
        if (await db.hasActiveInvite(this.event.message.from.id)) {
            await this.respond(
                '–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–≤–∏–Ω–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ, —á—Ç–æ–±—ã –µ–≥–æ –æ—Ç–º–µ–Ω–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel'
            )

            return
        }

        if (isValidTelegramUserId(this.event.message.text)) {
            await this.inviteById()
        } else {
            // TODO add handle validation
            await this.inviteByHandle()
        }
    }

    async inviteById() {
        const invitedId = +this.event.message.text

        if (this.event.message.from.id === invitedId) {
            await this.selfInvite()

            return
        }

        if (await db.wasSubscribedCheckById(invitedId)) {
            await this.respond(
                '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID —É–∂–µ –±—ã–ª –∫–æ–≥–¥–∞-—Ç–æ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–≥–æ!'
            )

            return
        }

        const invite = await db.getActiveInviteByInvitedId(invitedId)

        if (invite !== null) {
            if (this.isGuarded(invite)) {
                await this.respond(
                    '–ö—Ç–æ-—Ç–æ —É–∂–µ –ø—Ä–∏–≥–ª–∞—Å–∏–ª —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–≥–æ!'
                )

                return
            }

            await this.overwriteInvite(invite)
        }

        await db.createInviteById(this.event.message.from.id, invitedId)

        await this.inviteCreated()
    }

    async inviteByHandle() {
        const username = this.event.message.text.substring(1)

        if (this.event.message.from.username === username) {
            await this.selfInvite()

            return
        }

        if (await db.wasSubscribedCheckByUsername(username)) {
            await this.respond(
                '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º —é–∑–µ—Ä–Ω–µ–π–º–æ–º —É–∂–µ –±—ã–ª –∫–æ–≥–¥–∞-—Ç–æ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–≥–æ!'
            )

            return
        }

        const invite = await db.getActiveInviteByInvitedUsername(username)

        if (invite !== null) {
            if (this.isGuarded(invite)) {
                await this.respond(
                    '–ö—Ç–æ-—Ç–æ —É–∂–µ –ø—Ä–∏–≥–ª–∞—Å–∏–ª —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–≥–æ!'
                )

                return
            }

            await this.overwriteInvite(invite)
        }

        await db.createInviteByUsername(this.event.message.from.id, username)

        await this.inviteCreated()
    }

    async inviteCreated() {
        await this.respond('–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ ‚úÖ')
    }

    isGuarded(invite) {
        const guardEnd = invite.created_at.getTime() + MINUTES_UNTIL_OVERWRITE * 1000 * 60

        return guardEnd > Date.now()
    }

    async overwriteInvite(invite) {
        await telegramApi.sendMessage(
            invite.inviter_id,
            '–í–∞—à–µ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∏—Å—Ç–µ–∫–ª–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è ‚åõ'
        )

        await db.markInviteAs(invite.id, 'overwritten')
    }

    async selfInvite() {
        const answers = [
            '–ù–µ–ª—å–∑—è –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å —Å–∞–º–æ–≥–æ/—Å–∞–º—É —Å–µ–±—è',
            '–í—ã–±–µ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –î–†–£–ì–û–ì–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
            'üåö',
            'üõÇüö´'
        ];

        const answer = answers[Math.floor(Math.random() * answers.length)];

        await this.respond(answer)
    }
}

export {InviteCommand}